name: Testing

on:
  push:
    branches: feature/EP-18

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Dart
        uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      # - name: Verify formatting
      #   run: dart format .

      # - name: Analyze project source
      #   run: flutter analyze || true
      
      - name: Install lcov
        run: sudo apt-get update > /dev/null && sudo apt-get install lcov > /dev/null

      - name: Run tests with coverage for controller
        run: flutter test --coverage test/controller || true

      - name: Calculate code coverage percentage for controller
        run: |
          lcov --summary coverage/lcov.info | grep lines | awk '{print $2}'
        id: coverage_controller
      
      # - name: Publish coverage report for controller
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: coverage-report-controller
      #     path: coverage/lcov-report

      - name: Run tests with coverage for models
        run: flutter test --coverage test/models || true

      - name: Calculate code coverage percentage for models
        run: |
          lcov --summary coverage/lcov.info | grep lines | awk '{print $2}'
        id: coverage_models

      # - name: Publish coverage report for models
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: coverage-report-models
      #     path: coverage/lcov-report

      - name: Check coverage threshold and set job status
        run: |
          coverage_percentage_controller="${{ steps.coverage_controller.outputs.stdout }}"
          coverage_percentage_models="${{ steps.coverage_models.outputs.stdout }}"
          coverage_value_controller=$(echo "$coverage_percentage_controller" | sed 's/%//')
          coverage_value_models=$(echo "$coverage_percentage_models" | sed 's/%//')

          threshold=80.0

          if [[ $coverage_value_controller -ge $threshold && $coverage_value_models -ge $threshold ]]; then
            echo "Code coverage is above threshold. CI/CD passes."
            exit 0
          else
            echo "Code coverage is below threshold. CI/CD fails. Coverage for controller: $coverage_percentage_controller%, Coverage for models: $coverage_percentage_models%"
            exit 1
          fi